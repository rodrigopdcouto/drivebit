<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="[`]{K2$yTNn{8sy6WAC`" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="BRAzReIyDR$5_QZl8wf~" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="enum MotorEnum {" line1="    //%blockId=drivebit_motordriver_motor1" line2="    //% block=&quot;Motor1&quot;" line3="    m1," line4="    //%blockId=drivebit_motordriver_motor2" line5="    //% block=&quot;Motor2&quot;" line6="    m2" line7="}" numlines="8"></mutation><next><block type="typescript_statement" id="T9Xafc0YH2(hKde`9p%A" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace drivebit {" line1="    let motor11: DigitalPin = DigitalPin.P8" line2="    let motor12: DigitalPin = DigitalPin.P12" line3="    let motor21: DigitalPin = DigitalPin.P0" line4="    let motor22: DigitalPin = DigitalPin.P16" line5="    let motor11a: AnalogPin = degitalPin2analogPin(motor11)" line6="    let motor12a: AnalogPin = degitalPin2analogPin(motor12)" line7="    let motor21a: AnalogPin = degitalPin2analogPin(motor21)" line8="    let motor22a: AnalogPin = degitalPin2analogPin(motor22)" line9="" line10="    //% blockId=initializeMotorDriver" line11="    //% block=&quot;Initialize Driver $motor pin1=$pin1 pin2=$pin2&quot;" line12="    export function initializeMotorDriver(motor: MotorEnum, pin1: DigitalPin, pin2: DigitalPin): void {" line13="        if (motor == MotorEnum.m1) {" line14="            motor11 = pin1" line15="            motor12 = pin2" line16="            motor11a = degitalPin2analogPin(motor11)" line17="            motor12a = degitalPin2analogPin(motor12)" line18="        } else {" line19="            motor21 = pin1" line20="            motor22 = pin2" line21="            motor21a = degitalPin2analogPin(motor21)" line22="            motor22a = degitalPin2analogPin(motor22)" line23="        }" line24="    }" line25="" line26="    function degitalPin2analogPin(dpin: DigitalPin): AnalogPin {" line27="        let apin: AnalogPin = 0" line28="        if (dpin == DigitalPin.P0) apin = AnalogPin.P0" line29="        else if (dpin == DigitalPin.P1) apin = AnalogPin.P1" line30="        else if (dpin == DigitalPin.P2) apin = AnalogPin.P2" line31="        else if (dpin == DigitalPin.P3) apin = AnalogPin.P3" line32="        else if (dpin == DigitalPin.P4) apin = AnalogPin.P4" line33="        else if (dpin == DigitalPin.P5) apin = AnalogPin.P5" line34="        else if (dpin == DigitalPin.P6) apin = AnalogPin.P6" line35="        else if (dpin == DigitalPin.P7) apin = AnalogPin.P7" line36="        else if (dpin == DigitalPin.P8) apin = AnalogPin.P8" line37="        else if (dpin == DigitalPin.P9) apin = AnalogPin.P9" line38="        else if (dpin == DigitalPin.P10) apin = AnalogPin.P10" line39="        else if (dpin == DigitalPin.P11) apin = AnalogPin.P11" line40="        else if (dpin == DigitalPin.P12) apin = AnalogPin.P12" line41="        else if (dpin == DigitalPin.P13) apin = AnalogPin.P13" line42="        else if (dpin == DigitalPin.P14) apin = AnalogPin.P14" line43="        else if (dpin == DigitalPin.P15) apin = AnalogPin.P15" line44="        else if (dpin == DigitalPin.P16) apin = AnalogPin.P16" line45="        else if (dpin == DigitalPin.P19) apin = AnalogPin.P19" line46="        else if (dpin == DigitalPin.P20) apin = AnalogPin.P20" line47="        return apin" line48="    }" line49="" line50="    let OutputVal = 0" line51="    //% blockId=driveMotor" line52="    //% block=&quot;Drive Motor $motor signed speed $sspeed&quot;" line53="    //% sspeed.min=-100 sspeed.max=100" line54="    export function driveMotor(motor: MotorEnum, sspeed: number): void {" line55="        if (motor == MotorEnum.m1) {" line56="            if (sspeed &lt; 0) {" line57="                OutputVal = Math.trunc(-sspeed * 10.23)" line58="                if (1023 &lt; OutputVal) OutputVal = 1023" line59="                pins.analogWritePin(motor11a, OutputVal)" line60="                pins.digitalWritePin(motor12, 0)" line61="            } else {" line62="                OutputVal = Math.trunc(sspeed * 10.23)" line63="                if (1023 &lt; OutputVal) OutputVal = 1023" line64="                pins.analogWritePin(motor12a, OutputVal)" line65="                pins.digitalWritePin(motor11, 0)" line66="            }" line67="        } else {" line68="            if (sspeed &lt; 0) {" line69="                OutputVal = Math.trunc(-sspeed * 10.23)" line70="                if (1023 &lt; OutputVal) OutputVal = 1023" line71="                pins.analogWritePin(motor21a, OutputVal)" line72="                pins.digitalWritePin(motor22, 0)" line73="            } else {" line74="                OutputVal = Math.trunc(sspeed * 10.23)" line75="                if (1023 &lt; OutputVal) OutputVal = 1023" line76="                pins.analogWritePin(motor22a, OutputVal)" line77="                pins.digitalWritePin(motor21, 0)" line78="            }" line79="        }" line80="    }" line81="" line82="    //% blockId=brakeMotor" line83="    //% block=&quot;Brake Motor $motor&quot;" line84="    export function brakeMotor(motor: MotorEnum): void {" line85="        if (motor == MotorEnum.m1) {" line86="            pins.digitalWritePin(motor11, 1)" line87="            pins.digitalWritePin(motor12, 1)" line88="        } else {" line89="            pins.digitalWritePin(motor21, 1)" line90="            pins.digitalWritePin(motor22, 1)" line91="        }" line92="    }" line93="" line94="    //% blockId=coastMotor" line95="    //% block=&quot;Coast Motor $motor&quot;" line96="    export function coastMotor(motor: MotorEnum): void {" line97="        if (motor == MotorEnum.m1) {" line98="            pins.digitalWritePin(motor11, 0)" line99="            pins.digitalWritePin(motor12, 0)" line100="        } else {" line101="            pins.digitalWritePin(motor21, 0)" line102="            pins.digitalWritePin(motor22, 0)" line103="        }" line104="    }" line105="}" numlines="106"></mutation></block></next></block></statement></block></xml>